package sudoku

import (
	"reflect"
	"testing"
)

var easyBoard = [][]byte{{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
	{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
	{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
	{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
	{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
	{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
	{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
	{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
	{'.', '.', '.', '.', '8', '.', '.', '7', '9'}}

var hardBoard = [][]byte{{'.', '.', '.', '.', '.', '.', '.', '1', '2'},
	{'.', '.', '.', '.', '3', '5', '.', '.', '.'},
	{'.', '.', '.', '6', '.', '.', '.', '7', '.'},
	{'7', '.', '.', '.', '.', '.', '3', '.', '.'},
	{'.', '.', '.', '4', '.', '.', '8', '.', '.'},
	{'1', '.', '.', '.', '.', '.', '.', '.', '.'},
	{'.', '.', '.', '1', '2', '.', '.', '.', '.'},
	{'.', '8', '.', '.', '.', '.', '.', '4', '.'},
	{'.', '5', '.', '.', '.', '.', '6', '.', '.'}}

func TestSolveSudoku(t *testing.T) {
	var tests = []struct {
		board [][]byte
		want  [][]byte
	}{
		{easyBoard,
			[][]byte{{'5', '3', '4', '6', '7', '8', '9', '1', '2'},
				{'6', '7', '2', '1', '9', '5', '3', '4', '8'},
				{'1', '9', '8', '3', '4', '2', '5', '6', '7'},
				{'8', '5', '9', '7', '6', '1', '4', '2', '3'},
				{'4', '2', '6', '8', '5', '3', '7', '9', '1'},
				{'7', '1', '3', '9', '2', '4', '8', '5', '6'},
				{'9', '6', '1', '5', '3', '7', '2', '8', '4'},
				{'2', '8', '7', '4', '1', '9', '6', '3', '5'},
				{'3', '4', '5', '2', '8', '6', '1', '7', '9'}}},
		{hardBoard,
			[][]byte{{'6', '7', '3', '8', '9', '4', '5', '1', '2'},
				{'9', '1', '2', '7', '3', '5', '4', '8', '6'},
				{'8', '4', '5', '6', '1', '2', '9', '7', '3'},
				{'7', '9', '8', '2', '6', '1', '3', '5', '4'},
				{'5', '2', '6', '4', '7', '3', '8', '9', '1'},
				{'1', '3', '4', '5', '8', '9', '2', '6', '7'},
				{'4', '6', '9', '1', '2', '8', '7', '3', '5'},
				{'2', '8', '7', '3', '5', '6', '1', '4', '9'},
				{'3', '5', '1', '9', '4', '7', '6', '2', '8'}}},
	}
	for _, test := range tests {
		copyOfBoard := make([][]byte, len(test.board))
		for i := 0; i < len(test.board); i++ {
			copyOfBoard[i] = make([]byte, len(test.board[0]))
			copy(copyOfBoard[i], test.board[i])
		}
		if solveSudoku(test.board); !reflect.DeepEqual(test.board, test.want) {
			t.Errorf("solveSudoku(%v) = %v, want %v", copyOfBoard, test.board, test.want)
		}
	}
}

func BenchmarkEasySudoku(b *testing.B) {
	for i := 0; i < b.N; i++ {
		solveSudoku(easyBoard)
	}
}

func BenchmarkHardSudoku(b *testing.B) {
	for i := 0; i < b.N; i++ {
		solveSudoku(hardBoard)
	}
}
